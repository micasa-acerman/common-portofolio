{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/11/28/how-create-discord-bot","result":{"data":{"content":{"edges":[{"node":{"id":"c6c28c11-331e-5775-870d-11c0a7304f2c","html":"<h2 id=\"discord-bot\" style=\"position:relative;\"><a href=\"#discord-bot\" aria-label=\"discord bot permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Discord Bot</h2>\n<div class=\"content-body tutorial-content\" data-growable-markdown=\"\">\n<h3 id=\"введение\" style=\"position:relative;\"><a href=\"#%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5\" aria-label=\"введение permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Введение</h3>\n<p><a href=\"https://discord.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Discord</a> — это приложение чата, позволяющее миллионам пользователей со всего мира обмениваться сообщениями и общаться в голосовом чате в сообществах, называемых <a href=\"https://discord.com/developers/docs/resources/guild\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">«гильдии»</a> или «серверы». Discord также включает функциональный API, который разработчики смогут использовать для построения мощных ботов Discord. Боты могут выполнять разнообразные действия, в том числе отправлять сообщения на серверы, отправлять пользователям сообщения DM, модерировать серверы и воспроизводить звук в голосовых чатах. Это позволяет разработчикам создавать мощных ботов со сложными и продвинутыми функциями, включая инструменты модерирования и даже игры. Например, служебный бот <a href=\"https://dyno.gg/bot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dyno</a> обслуживает миллионы гильдий и содержит множество полезных функций, включая защиту от спама, музыкальный проигрыватель и другие служебные функции. Научившись создавать боты Discord, вы получите множество возможностей, с которыми тысячи людей смогут взаимодействовать каждый день.</p>\n<p>В этом обучающем модуле мы создадим бот Discord с нуля, используя <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js</a> и библиотеку <a href=\"https://discord.js.org/#/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Discord.js</a>, позволяющую пользователям взаимодействовать с Discord API напрямую. Мы настроим профиль бота Discord, получим токены аутентификации для бота и запрограммируем бот для обработки отправляемых пользователями команд с аргументами.</p>\n<p><a name=\"предварительные-требования\" data-unique=\"предварительные-требования\"></a><a name=\"предварительные-требования\" data-unique=\"предварительные-требования\"></a></p>\n<h2 id=\"предварительные-требования\" style=\"position:relative;\"><a href=\"#%D0%BF%D1%80%D0%B5%D0%B4%D0%B2%D0%B0%D1%80%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5-%D1%82%D1%80%D0%B5%D0%B1%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F\" aria-label=\"предварительные требования permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Предварительные требования</h2>\n<p>Для начала вам потребуется следующее:</p>\n<ul>\n<li>Node.js, установленный на вашем компьютере для разработки. Чтобы установить его в macOS или Ubuntu 18.04, следуйте указаниям руководства <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-and-create-a-local-development-environment-on-macos\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Установка Node.js и создание локальной среды разработки в macOS</a> или раздела <strong>Установка с помощью PPA</strong> руководства <a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-18-04\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Установка Node.js в Ubuntu 18.04</a>.</li>\n<li>Любой текстовый редактор по вашему усмотрению, например, <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Code</a>, <a href=\"https://atom.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Atom</a>, <a href=\"https://www.sublimetext.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sublime</a> или <a href=\"https://www.nano-editor.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nano</a>.</li>\n<li><a href=\"https://discord.com/register\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Бесплатная учетная запись Discord</a> с подтвержденной учетной записью электронной почты и <a href=\"https://support.discord.com/hc/en-us/articles/204849977-How-do-I-create-a-server-\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">бесплатный сервер Discord</a>, который вы будете использовать для тестирования вашего бота Discord.</li>\n</ul>\n<p><a name=\"шаг-1-—-настройка-бота-discord\" data-unique=\"шаг-1-—-настройка-бота-discord\"></a><a name=\"шаг-1-—-настройка-бота-discord\" data-unique=\"шаг-1-—-настройка-бота-discord\"></a></p>\n<h2 id=\"шаг-1--настройка-бота-discord\" style=\"position:relative;\"><a href=\"#%D1%88%D0%B0%D0%B3-1--%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B0-%D0%B1%D0%BE%D1%82%D0%B0-discord\" aria-label=\"шаг 1  настройка бота discord permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Шаг 1 — Настройка бота Discord</h2>\n<p>На этом шаге вы будете использовать графический интерфейс разработчиков Discord для настройки бота Discord и получения токена бота, который вы передадите в свою программу.</p>\n<p>Чтобы зарегистрировать бота на платформе Discord, используйте <a href=\"https://discord.com/developers/applications/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">панель приложений Discord</a>. Здесь разработчики могут создавать приложения Discord, включая ботов Discord.</p>\n<p><img src=\"https://assets.digitalocean.com/articles/node_discord_bot/step1a.png\" alt=\"Изображение панели приложений Discord после первого посещения сайта https://discord.com/developers/applications\"></p>\n<p>Для начала нажмите <strong>New Application</strong> (Новое приложение). Discord предложит вам ввести имя нового приложения. Затем нажмите <strong>Create</strong> (Создать) для создания приложения.</p>\n<p><img src=\"https://assets.digitalocean.com/articles/node_discord_bot/step1b.png\" alt=\"Изображение командной строки для создания приложения с введенным именем приложения &#x22;Test Node.js Bot&#x22;\"></p>\n<p><span class=\"note\"><strong>Примечание.</strong> Имя приложения не связано с именем бота, и эти имена могут не совпадать.<br>\n</span></p>\n<p>Теперь откройте свою панель приложения. Чтобы добавить бота в приложение, откройте вкладку <strong>Bot</strong> (Бот) на панели навигации слева.</p>\n<p><img src=\"https://assets.digitalocean.com/articles/node_discord_bot/step1c.png\" alt=\"Изображение вкладки Bot на панели приложений\"></p>\n<p>Нажмите кнопку <strong>Add Bot</strong> (Добавить бота), чтобы добавить бота в приложение. Нажмите кнопку <strong>Yes, do it!</strong> (Да, сделать это!) в диалоге запроса подтверждения. Откроется панель с подробными сведениями об имени вашего бота, токене аутентификации и изображении в профиле.</p>\n<p><img src=\"https://assets.digitalocean.com/articles/node_discord_bot/step1d.png\" alt=\"Панель с подробными сведениями о боте\"></p>\n<p>На этой панели вы можете изменить имя бота или изображение профиля. Также необходимо скопировать токен аутентификации бота, нажав <strong>Click to Reveal Token</strong> (Нажмите для показа токена) и скопировав отображаемый токен.</p>\n<p><span class=\"warning\"><strong>Предупреждение.</strong> Никогда не публикуйте и не выгружайте в сеть свой токен бота, поскольку это позволит любому пользователю выполнить вход в бот.<br>\n</span></p>\n<p>Теперь нужно создать приглашение, которое позволяет добавить гильдии ботов Discord, где вы можете протестировать бот. Вначале перейдите на вкладку <strong>OAuth2</strong> на панели приложения. Чтобы создать приглашения, прокрутите страницу и выберите <strong>бота</strong> в разделе <strong>scopes</strong>. Также необходимо установить разрешения, чтобы определить, какие действия бот может выполнять в гильдиях. Для целей этого обучающего модуля выберите пункт <strong>Administrator</strong> (Администратор), которые дадут вашему боту разрешения для выполнения в гильдиях практически любых действий. Скопируйте ссылку с помощью кнопки .</p>\n<p><img src=\"https://assets.digitalocean.com/articles/node_discord_bot/step1e.png\" alt=\"Вкладка OAuth2 с установленной сферой действия bot и уровнем разрешений administator\"></p>\n<p>Затем добавьте бот на сервер. Перейдите по созданной ссылке с приглашением. Вы можете добавить бот на любой сервер, который вам принадлежит или на котором у вас есть права администратора, используя выпадающее меню.</p>\n<p><img src=\"https://assets.digitalocean.com/articles/node_discord_bot/step1f.png\" alt=\"Страница после перехода по ссылке с приглашением, что позволяет пользователям добавлять бот на серверы\"></p>\n<p>Теперь нажмите кнопку <strong>Continue</strong> (Продолжить). Обязательно установите отметку рядом с полем <strong>Administrator</strong>, чтобы предоставить боту разрешения администратора. Затем нажмите <strong>Authorize</strong> (Авторизация). Discord предложит вам решить головоломку <a href=\"https://en.wikipedia.org/wiki/CAPTCHA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CAPTCHA</a>, прежде чем бот сможет подключиться к серверу. Теперь наш бот Discord отображается в списке пользователей сервера, на который вы добавили бота, со статусом <strong>offline</strong> (не в сети).</p>\n<p><img src=\"https://assets.digitalocean.com/articles/node_discord_bot/step1g.png\" alt=\"Список пользователей сервера Discord с новым ботом в разделе offline списка пользователей\"></p>\n<p>Вы успешно создали бота Discord и добавили его на сервер. Далее мы напишем программу для входа в бот.</p>\n<p><a name=\"шаг-2-—-создание-проекта\" data-unique=\"шаг-2-—-создание-проекта\"></a><a name=\"шаг-2-—-создание-проекта\" data-unique=\"шаг-2-—-создание-проекта\"></a></p>\n<h2 id=\"шаг-2--создание-проекта\" style=\"position:relative;\"><a href=\"#%D1%88%D0%B0%D0%B3-2--%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0\" aria-label=\"шаг 2  создание проекта permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Шаг 2 — Создание проекта</h2>\n<p>На этом шаге мы настроим базовую среду программирования, где выполним сборку бота и войдем в него программным путем.</p>\n<p>Вначале необходимо настроить папку проекта и необходимые файлы проекта для бота.</p>\n<p>Создайте папку проекта:</p>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">mkdir discord-bot</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Перейдите в только что созданную папку проекта:</p>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">cd discord-bot</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Далее используйте текстовый редактор для создания файла с именем <code class=\"language-text\">config.json</code> для сохранения токена аутентификации вашего бота:</p>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">nano config.json</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Затем добавьте в файл конфигурации следующий код, заменяя выделенный текст токеном аутентификации вашего бота:</p>\n<div class=\"code-label \" title=\"config.json\">config.json</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">{\n    &quot;BOT_TOKEN&quot;: &quot;YOUR BOT TOKEN&quot;\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Сохраните и закройте файл.</p>\n<p>Затем мы создадим файл <code class=\"language-text\">package.json</code>, где будут храниться детали нашего проекта и информация о зависимостях, используемых в проекте. Для создания файла <code class=\"language-text\">package.json</code> запустите следующую команду <code class=\"language-text\">npm</code>:</p>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">npm init</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p><code class=\"language-text\">npm</code> запросит различные детали вашего проекта. Если вам нужны указания по <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-node-js-modules-with-npm-and-package-json#step-1-%E2%80%94-creating-a-packagejson-file\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ответам на эти запросы, воспользуйтесь руководством «Использование модулей Node.js с npm и package.json</a>».</p>\n<p>Сейчас мы установим пакет <code class=\"language-text\">discord.js</code>, который будем использовать для взаимодействия с Discord API. Вы можете установить <code class=\"language-text\">discord.js</code> через npm с помощью следующей команды:</p>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">npm install discord.js</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Мы настроили файл конфигурации, установили необходимую зависимость и теперь можем начать сборку бота. В реальном приложении мы бы разделили код большого бота на несколько файлов, но в этом обучающем модуле мы поместим весь код бота в один файл.</p>\n<p>Вначале создайте файл с именем <code class=\"language-text\">index.js</code> в папке <code class=\"language-text\">&lt;span class=&quot;highlight&quot;&gt;discord-bot&lt;/span&gt;</code> для кода:</p>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">nano index.js</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Начните программирование бота, запросив зависимость <code class=\"language-text\">discord.js</code> и файл конфигурации с токеном бота:</p>\n<div class=\"code-label \" title=\"index.js\">index.js</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">const Discord = require(&quot;discord.js&quot;);\nconst config = require(&quot;./config.json&quot;);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>После этого добавьте следующие две строки кода:</p>\n<div class=\"code-label \" title=\"index.js\">index.js</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">...\nconst client = new Discord.Client();\n\nclient.login(config.BOT_TOKEN);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Сохраните и закройте файл.</p>\n<p>Первая строка кода создает новый клиент <code class=\"language-text\">Discord.Client</code> и назначает его как значение константы <code class=\"language-text\">client</code>. Этот клиент частично обеспечивает взаимодействие с Discord API и получает уведомления Discord о событиях, например, о новых сообщениях. Фактически клиент представляет бот Discord.</p>\n<p>Во второй строке кода метод <code class=\"language-text\">login</code> используется на <code class=\"language-text\">клиенте</code> для входа в созданный бот Discord с использованием токена в файле <code class=\"language-text\">config.json</code> в качестве пароля. Токен сообщает Discord API, для какого бота предназначена программа, а также подтверждает вашу аутентификацию для использования бота.</p>\n<p>Теперь запустите файл <code class=\"language-text\">index.js</code> с помощью Node:</p>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">node index.js</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Теперь статус вашего бота на сервере Discord, куда вы его добавили, изменится на online (в сети).</p>\n<p><img src=\"https://assets.digitalocean.com/articles/node_discord_bot/step2a.png\" alt=\"Изображение бота со статусом online\"></p>\n<p>Мы успешно настроили среду программирования и создали базовый код для входа в бот Discord. На следующем шаге мы займемся пользовательскими командами и заставим бота выполнить определенные действия, например, отправить сообщения.</p>\n<p><a name=\"шаг-3-—-обработка-первой-команды-пользователя\" data-unique=\"шаг-3-—-обработка-первой-команды-пользователя\"></a><a name=\"шаг-3-—-обработка-первой-команды-пользователя\" data-unique=\"шаг-3-—-обработка-первой-команды-пользователя\"></a></p>\n<h2 id=\"шаг-3--обработка-первой-команды-пользователя\" style=\"position:relative;\"><a href=\"#%D1%88%D0%B0%D0%B3-3--%D0%BE%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0-%D0%BF%D0%B5%D1%80%D0%B2%D0%BE%D0%B9-%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D1%8B-%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F\" aria-label=\"шаг 3  обработка первой команды пользователя permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Шаг 3 — Обработка первой команды пользователя</h2>\n<p>На этом шаге мы создадим бот, который может обрабатывать команды пользователя. Вы запустите свою первую команду <code class=\"language-text\">ping</code>, на которую будет отправлен ответ <code class=\"language-text\">pong</code> с указанием времени ответа на команду.</p>\n<p>Сначала необходимо обеспечить обнаружение и получение любых отправляемых пользователями сообщений, чтобы бот мог обрабатывать любые команды. Используя метод <code class=\"language-text\">on</code> клиента Discord, Discord будет отправлять вам уведомления о новых событиях. Метод <code class=\"language-text\">on</code> принимает два аргумента: название ожидаемого события и функцию, которая будет запускаться каждый раз, когда будет возникать это событие. С этим методом вы можете ожидать события <code class=\"language-text\">message</code>, которое будет возникать каждый раз при отправке сообщения в гильдию, где у бота имеется разрешение на просмотр сообщений. Поэтому мы создадим функцию, которая будет запускаться для обработки команд каждый раз при отправке сообщения.</p>\n<p>Вначале откройте свой файл:</p>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">nano index.js</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Добавьте в файл следующий код:</p>\n<div class=\"code-label \" title=\"index.js\">index.js</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">...\nconst client = new Discord.Client();\n\nclient.on(&quot;message&quot;, function(message) { \n\n});                                      \n\nclient.login(config.BOT_TOKEN);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Эта функция, выполняемая для события <code class=\"language-text\">message</code>, принимает параметр <code class=\"language-text\">message</code>. Параметр <code class=\"language-text\">message</code> имеет значение экземпляра <a href=\"https://discord.js.org/#/docs/main/stable/class/Message\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Discord.js message</a>, содержащее информацию об отправленном сообщении и методах, которые помогут боту ответить на него.</p>\n<p>Добавьте следующую строку кода в функцию обработки команд:</p>\n<div class=\"code-label \" title=\"index.js\">index.js</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">...\nclient.on(&quot;message&quot;, function(message) {\n  if (message.author.bot) return;\n});\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Эта строка проверяет, является ли автор сообщения ботом, и если это так, останавливает обработку команды. Это важно, поскольку обычно нам не нужно обрабатывать сообщения ботов или отвечать на них. Другим ботам обычно не требуется использовать наш бот, и поэтому игнорирование их сообщений позволит нам сэкономить вычислительную мощность и предотвратить случайные ответы.</p>\n<p>Теперь мы напишем обработчик команд. Для этого важно понимать обычный формат команды Discord. Обычно структура команды Discord содержит три части в следующем порядке: префикс, имя команды и (иногда) аргументы команды.</p>\n<p><img src=\"https://assets.digitalocean.com/articles/node_discord_bot/step3a.png\" alt=\"Изображение типичной команды Discord &#x22;! add 1 2&#x22;\"></p>\n<ul>\n<li>Префикс: префикс может быть любым, но обычно это знак пунктуации или абстрактная фраза, которая обычно не может располагаться в начале сообщения. Это означает, что при добавлении префикса в начало сообщения бот будет знать, что это команда, которую ему необходимо обработать.</li>\n<li>Имя команды: имя команды, которое пользователь хочет использовать. Это означает, что бот может поддерживать несколько команд с разными функциями и разрешать пользователям выбирать между ними, используя разные имена команд.</li>\n<li>Аргументы: иногда команда запрашивает или использует дополнительную информацию от пользователя, и пользователь может указывать аргументы после имени команды, разделяя их пробелами.</li>\n</ul>\n<p><span class=\"note\"><strong>Примечание.</strong> Принудительно устанавливаемой структуры команд нет, и боты могут обрабатывать команды как угодно, однако здесь мы описываем эффективную структуру, которую использует большинство ботов.<br>\n</span></p>\n<p>Чтобы начать создание синтаксического анализатора команд, поддерживающего этот формат, добавьте следующие строки кода в функцию обработки сообщений:</p>\n<div class=\"code-label \" title=\"index.js\">index.js</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">...\nconst prefix = &quot;!&quot;;\n\nclient.on(&quot;message&quot;, function(message) {\n  if (message.author.bot) return;\n  if (!message.content.startsWith(prefix)) return;\n});\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Первая строка кода добавляется, чтобы присвоить значение <code class=\"language-text\">&quot;!&quot;</code> константе <code class=\"language-text\">prefix</code>, которую мы будем использовать в качестве префикса бота.</p>\n<p>Вторая строка кода проверяет, начинается ли содержание обрабатываемого ботом сообщения с заданного префикса, и останавливает дальнейшую обработку сообщения, если префикса нет.</p>\n<p>Теперь необходимо конвертировать остальную часть сообщения в название команды и любые аргументы, которые могут присутствовать в сообщении. Добавьте следующие выделенные строки:</p>\n<div class=\"code-label \" title=\"index.js\">index.js</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">...\nclient.on(&quot;message&quot;, function(message) {\n  if (message.author.bot) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const commandBody = message.content.slice(prefix.length);\n  const args = commandBody.split(&#39; &#39;);\n  const command = args.shift().toLowerCase();\n});\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Первая строка используется для удаления префикса из содержания сообщения и назначения результата константе <code class=\"language-text\">commandBody</code>. Это необходимо, поскольку нам не нужно, чтобы префикс входил в обработанное имя команды.</p>\n<p>Вторая строка принимает сообщение с удаленным префиксом и использует на нем <a href=\"https://www.digitalocean.com/community/tutorials/how-to-index-split-and-manipulate-strings-in-javascript#splitting-strings\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">метод <code class=\"language-text\">split</code></a> с пробелом в качестве разделителя. Он разделяет команду на массив субстрок, проводя разделение после каждого пробела. В результате получается массив, содержащий имя команды, за которым идут аргументы (если они содержатся в сообщении). Мы назначаем этот массив константе <code class=\"language-text\">args</code>.</p>\n<p>Третья строка удаляет первый элемент из массива <code class=\"language-text\">args</code> (это будет имя команды), конвертирует его в нижний регистр и назначает константе <code class=\"language-text\">command</code>. Это позволяет изолировать имя команды и оставить в массиве только аргументы. Также мы используем метод <code class=\"language-text\">toLowerCase</code>, поскольку команды в ботах Discord обычно не учитывают регистр.</p>\n<p>Мы завершили построение синтаксического анализатора команд с реализацией обязательного префикса и получением имени команды и всех аргументов из сообщений. Теперь мы реализуем и создадим код для определенных команд.</p>\n<p>Добавьте следующий код, чтобы начать реализацию команды <code class=\"language-text\">ping</code>:</p>\n<div class=\"code-label \" title=\"index.js\">index.js</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">...\n  const args = commandBody.split(&#39; &#39;);\n  const command = args.shift().toLowerCase();\n\n  if (command === &quot;ping&quot;) {\n\n  }                        \n});\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Это <a href=\"https://www.digitalocean.com/community/tutorials/how-to-write-conditional-statements-in-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">выражение <code class=\"language-text\">if</code></a> проверяет соответствие обработанного имени команды (назначенного константе <code class=\"language-text\">command</code>) значению <code class=\"language-text\">&quot;ping&quot;</code>. Такое соответствие означает, что пользователь хочет использовать команду <code class=\"language-text\">&quot;ping&quot;</code>. Мы вложим код определенной команды в блок выражения <code class=\"language-text\">if</code>. Впоследствии вы сможете использовать этот шаблон для других команд.</p>\n<p>Теперь вы можете реализовать код для команды <code class=\"language-text\">&quot;ping&quot;</code>:</p>\n<div class=\"code-label \" title=\"index.js\">index.js</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">...\n  if (command === &quot;ping&quot;) {\n    const timeTaken = Date.now() - message.createdTimestamp;\n    message.reply(`Pong! This message had a latency of ${timeTaken}ms.`);\n  }\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Сохраните и закройте файл.</p>\n<p>Мы добавляем блок команды <code class=\"language-text\">&quot;ping&quot;</code>, который рассчитывает разницу между текущим временем, определяемым с помощью <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">метода <code class=\"language-text\">now</code></a> объекта <code class=\"language-text\">Date</code>, и временной меткой создания сообщения, выражаемую в миллисекундах. Таким образом рассчитывается время обработки сообщения и ответа бота на команду <code class=\"language-text\">&quot;ping&quot;</code>.</p>\n<p>Вторая строка отвечает на команду пользователя, используя метод <code class=\"language-text\">reply</code> с константой <code class=\"language-text\">message</code>. <a href=\"https://discord.js.org/#/docs/main/stable/class/Message?scrollTo=reply\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Метод <code class=\"language-text\">reply</code></a> отправляет запрос ping (уведомляющий пользователя и выделяющий сообщение для указанного пользователя) пользователю, который отправил команду, добавляя после запроса содержание, указанное в качестве первого аргумента метода. Мы указали <a href=\"https://www.digitalocean.com/community/tutorials/understanding-template-literals-in-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">литераль шаблона</a>, содержащую сообщение и рассчитанное значение ping, в качестве ответа, который будет использоваться методом <code class=\"language-text\">reply</code>.</p>\n<p>На этом мы завершаем реализацию команды <code class=\"language-text\">&quot;ping&quot;</code>.</p>\n<p>Запустите свой бот с помощью следующей команды (в той же папке, что и <code class=\"language-text\">index.js</code>):</p>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">node index.js</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Теперь вы можете использовать команду <code class=\"language-text\">&quot;! ping&quot;</code> на любом канале, где бот может просматривать и принимать сообщения, а также отправлять ответы.</p>\n<p><img src=\"https://assets.digitalocean.com/articles/node_discord_bot/step3b.png\" alt=\"Изображение бота, отвечающего в Discord на запрос &#x22;! ping&#x22; ответом &#x22;@T0M, Pong! This message had a latency of 1128ms.&#x22;\"></p>\n<p>Вы успешно создали бот, который может обрабатывать команды пользователей, и реализовали свою первую команду. На следующем шаге мы продолжим разработку бота, реализовав команду sum.</p>\n<p><a name=\"шаг-4-—-реализация-команды-sum\" data-unique=\"шаг-4-—-реализация-команды-sum\"></a><a name=\"шаг-4-—-реализация-команды-sum\" data-unique=\"шаг-4-—-реализация-команды-sum\"></a></p>\n<h2 id=\"шаг-4--реализация-команды-sum\" style=\"position:relative;\"><a href=\"#%D1%88%D0%B0%D0%B3-4--%D1%80%D0%B5%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D0%BA%D0%BE%D0%BC%D0%B0%D0%BD%D0%B4%D1%8B-sum\" aria-label=\"шаг 4  реализация команды sum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Шаг 4 — Реализация команды Sum</h2>\n<p>Теперь мы расширим нашу программу, реализовав команду <code class=\"language-text\">&quot;! sum&quot;</code>. Эта команда принимает любое количество аргументов, складывает их и возвращает пользователю сумму всех аргументов.</p>\n<p>Если ваш бот Discord еще работает, вы можете остановить его процессы, нажав <code class=\"language-text\">CTRL + C</code>.</p>\n<p>Откройте файл <code class=\"language-text\">index.js</code> снова:</p>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">nano index.js</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Чтобы начать реализацию команды <code class=\"language-text\">&quot;! sum&quot;</code>, мы используем блок <code class=\"language-text\">else-if</code>. После проверки имени команды ping бот будет проверять, имеет ли имя команды значение <code class=\"language-text\">&quot;sum&quot;</code>. Мы используем блок <code class=\"language-text\">else-if</code>, потому что одновременно будет обрабатываться только одна команда, и если программа определит совпадение с именем команды <code class=\"language-text\">&quot;ping&quot;</code>, ей не нужно будет проводить проверку на совпадение с именем команды <code class=\"language-text\">&quot;sum&quot;</code>. Добавьте в файл следующие выделенные строки:</p>\n<div class=\"code-label \" title=\"index.js\">index.js</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">...\n  if (command === &quot;ping&quot;) {\n    const timeTaken = Date.now() - message.createdTimestamp;\n    message.reply(`Ping! This message had a latency of ${timeTaken}ms.`);\n  }\n\n  else if (command === &quot;sum&quot;) {\n\n  }                            \n});\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Теперь вы можете начать реализацию кода для команды <code class=\"language-text\">&quot;sum&quot;</code>. Код команды <code class=\"language-text\">&quot;sum&quot;</code> будет размещен в только что созданном нами блоке <code class=\"language-text\">else-if</code>. Теперь добавьте следующий код:</p>\n<div class=\"code-label \" title=\"index.js\">index.js</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">...\n  else if (command === &quot;sum&quot;) {\n    const numArgs = args.map(x =&gt; parseFloat(x));\n    const sum = numArgs.reduce((counter, x) =&gt; counter += x);\n    message.reply(`The sum of all the arguments you provided is ${sum}!`);\n  }\n...</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Мы используем <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-array-methods-in-javascript-iteration-methods#map()\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">метод <code class=\"language-text\">map</code></a> для списка аргументов, чтобы создать новый список, используя функцию <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">parseFloat</code></a> для каждого элемента в массиве <code class=\"language-text\">args</code>. При этом создается новый массив (назначенный константе <code class=\"language-text\">numArgs</code>), где все элементы являются числами, а не строками. Это означает, что в дальнейшем вы можете определить сумму чисел, выполнив операцию сложения.</p>\n<p>Вторая строка использует <a href=\"https://www.digitalocean.com/community/tutorials/how-to-use-array-methods-in-javascript-iteration-methods#reduce()\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">метод <code class=\"language-text\">reduce</code></a> на константе <code class=\"language-text\">numArgs</code>, предоставляя функцию, суммирующую все элементы в списке. Мы назначаем сумму всех элементов в <code class=\"language-text\">numArgs</code> как значение константы <code class=\"language-text\">sum</code>.</p>\n<p>Затем мы используем метод <code class=\"language-text\">reply</code> на объекте сообщений, чтобы ответить на команду пользователя, отправив <a href=\"https://www.digitalocean.com/community/tutorials/understanding-template-literals-in-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">литераль шаблона</a>, содержащую сумму всех аргументов, отправленных пользователем боту.</p>\n<p>Это завершает реализацию команды <code class=\"language-text\">&quot;sum&quot;</code>. Теперь запустите бот, используя следующую команду (в той же папке, что и <code class=\"language-text\">index.js</code>):</p>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">node index.js</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>Теперь вы можете использовать команду <code class=\"language-text\">&quot;! sum&quot;</code> на любом канале, где бот может просматривать и отправлять сообщения.</p>\n<p><img src=\"https://assets.digitalocean.com/articles/node_discord_bot/step4a.png\" alt=\"Изображение бота, отвечающего &#x22;The sum of all the arguments you provided is 6!&#x22; на &#x22;! sum 1 2 3&#x22;, а затем отвечающего &#x22;The sum of all the arguments you provided is 13! на &#x22;! sum 1.5 1.5 10&#x22;\"></p>\n<p>Далее приведена законченная версия скрипта бота <code class=\"language-text\">index.js</code>:</p>\n<div class=\"code-label \" title=\"index.js\">index.js</div>\n<div class=\"code-toolbar\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">const Discord = require(&quot;discord.js&quot;);\nconst config = require(&quot;./config.json&quot;);\n\nconst client = new Discord.Client();\n\nconst prefix = &quot;!&quot;;\n\nclient.on(&quot;message&quot;, function(message) {\n  if (message.author.bot) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const commandBody = message.content.slice(prefix.length);\n  const args = commandBody.split(&#39; &#39;);\n  const command = args.shift().toLowerCase();\n\n  if (command === &quot;ping&quot;) {\n    const timeTaken = Date.now() - message.createdTimestamp;\n    message.reply(`Pong! This message had a latency of ${timeTaken}ms.`);\n  }\n\n  else if (command === &quot;sum&quot;) {\n    const numArgs = args.map(x =&gt; parseFloat(x));\n    const sum = numArgs.reduce((counter, x) =&gt; counter += x);\n    message.reply(`The sum of all the arguments you provided is ${sum}!`);\n  }\n});\n\nclient.login(config.BOT_TOKEN);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"toolbar\">\n<div class=\"toolbar-item\"></div>\n</div>\n</div>\n<p>На этом шаге мы дополнили наш бот Discord, реализовав в нем команду <code class=\"language-text\">sum</code>.</p>\n<p><a name=\"заключение\" data-unique=\"заключение\"></a><a name=\"заключение\" data-unique=\"заключение\"></a></p>\n<h2 id=\"заключение\" style=\"position:relative;\"><a href=\"#%D0%B7%D0%B0%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD%D0%B8%D0%B5\" aria-label=\"заключение permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Заключение</h2>\n<p>Мы успешно создали бот Discord, который может обрабатывать разные команды пользователей и аргументы команд. Если вы хотите расширить возможности вашего бота, вы можете реализовать дополнительные команды или использовать другие части Discord API для построения мощного бота Discord. Вы можете ознакомиться с <a href=\"https://discord.js.org/#/docs/main/stable/general/welcome\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">документацией по Discord.js</a> или <a href=\"https://discord.com/developers/docs/intro\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Discord API</a>, чтобы узнать больше о Discord API.</p>\n<p>При создании ботов Discord всегда помните об <a href=\"https://discord.com/developers/docs/legal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">условиях обслуживания Discord API</a>, определяющих требования к использованию Discord API разработчиками. Также вам может быть полезен <a href=\"https://github.com/meew0/discord-bot-best-practices/blob/master/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">этот набор рекомендаций</a>, показывающий наилучшие способы построения бота Discord и содержащий советы по проектированию ботов Discord. Если вы хотите узнать больше о Node.js, ознакомьтесь с нашей <a href=\"https://www.digitalocean.com/community/tutorial_series/how-to-code-in-node-js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">серией материалов «Программирование в Node.js»</a>.</p>\n</div>","excerpt":"Discord Bot Введение Discord — это приложение чата, позволяющее миллионам пользователей со всего мира обмениваться сообщениями и общаться в…","fields":{"slug":"/2020/11/28/how-create-discord-bot"},"frontmatter":{"id":"24214ewqedsadas","title":"Как создать дискорд бота?","slug":"/2020/11/28/how-create-discord-bot","date":"2020-11-28T03:48:03.125Z","headerImage":"https://i.imgur.com/z3sHshB.png"}},"previous":null,"next":null}]}},"pageContext":{"id":"c6c28c11-331e-5775-870d-11c0a7304f2c","index":0}},"staticQueryHashes":["1003931674","3920033386"]}