{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/11/30/what-data-structures-javascript-developer-should-know","result":{"data":{"content":{"edges":[{"node":{"id":"be2eef1f-428f-5bee-a343-5a9332a3a332","html":"<h2 id=\"введение\" style=\"position:relative;\"><a href=\"#%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5\" aria-label=\"введение permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Введение</h2>\n<p>Понимание стуктур данных помогает во многих аспектах программирования. Не нужно использовать какую-то определенную реализацию, в котором бы вы использовали дерево или графы. Скажу больше, не думаю, что правильно реализовывал структуры данных за мои 8 лет опыта программирования, однако понимание их работы помогало мне в некоторых кейсах.</p>\n<p>Понимание работы структур данных, их поведении можно использовать и в во многих областях. К примеру, нам нужно описать архитектуру на основанную на микросервисах, как ее описать? Теперь посмотрим на следующее изображение:\n<img src=\"/common-portofolio/images/2020-11-30-stuctures-1.png\" alt=\"Illustration\">\nНадеюсь, ты понимаешь к чему я клоню мармеладка :D Даже взвешенный граф можно рассматривать как представление архитектуры. При этом учитывать вес ребер (к примеру, как время обращения одного сервиса к другому). То же самое можно сказать и о других структурах.</p>\n<p><strong>Примечание</strong>: некоторые из этих структур могут быть легко представлены массивами, но вам нужно посмотреть немного дальше, чтобы понять всю их мощь. Структуры данных - это не только способ структурирования данных, но и связанная с ней логика. То, как вы вставляете данные, что с ними происходит внутри, и даже то, как вы извлекаете данные из своей структуры. В этом заключается настоящая магия структур данных и весь смысл их существования. В противном случае мы бы не парились и использовали массивы.</p>\n<h2 id=\"очереди\" style=\"position:relative;\"><a href=\"#%D0%BE%D1%87%D0%B5%D1%80%D0%B5%D0%B4%D0%B8\" aria-label=\"очереди permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Очереди</h2>\n<p>Предположим, вам нужно обработать список задач в порядке их внесения, для решения поставленной проблемы подойдут очереди. Очереди - это простая структура, в которую вы можете вносить данные и извлекать их в соответствии с подходом <em>FIFO: First In First Out</em>. Другими словами, это структура данных похожа на очередь в <em>KFC</em>. Если человек пришел раньше, соответственно обслужат его быстрее.</p>\n<p><img src=\"/common-portofolio/images/2020-11-30-stuctures-2.png\" alt=\"Queue\"></p>\n<p>Как видно из диаграммы выше, сама структура и реализация просты, особенно если вы используете массивы в качестве базовой структуры данных.</p>\n<pre><code>\nclass Queue {\n    data = []\n    maxSize\n\n    constructor(initialData, maxSize = -1) {\n        this.data = Array.isArray(initialData) ? initialData : (typeof initialData == \"undefined\" ? [] : [initialData])\n        this.maxSize = maxSize\n    }\n    \n    isFull() {\n        return this.maxSize != -1 ? (this.data.length == this.maxSize) : false\n    }\n    \n    isEmpty() {\n        return this.data.length == 0\n    }\n    \n    enqueue(item) {\n        if(this.isFull()) {\n            return false\n        }\n        this.data.push(item)\n    }\n    \n    *generator() {\n        while(!this.isEmpty()) {\n            yield this.data.shift()\n        }\n    }\n    \n    dequeue() {\n       const { value, done } = this.generator().next() \n       if(done) return false\n       return value\n    }\n}\n</pre></code>\n<p>Два основных метода из этой реализации - это методы <strong>enqueue</strong> и <strong>dequeue</strong>. С помощью первого вы можете добавлять элементы в очередь, а с помощью последнего - удалять.</p>\n<p>Как видите, я выбрал массив для базовой структуры данных, потому что он значительно упрощает оба метода. </p>\n<p>Постановка в очередь - это то же самое, что вставка элемента в массив, а исключение из очереди решается простым вызовом <strong>shift</strong>, который удаляет первый элемент и также возвращает его.</p>\n<p>Функция <em>генератора</em> была добавлена в качестве дополнительной вишенки, позволяющей выполнять операции, подобные показанной ниже:</p>\n<pre><code>\nlet q = new Queue(3, 2)\n\n// Без генератора\nq.enqueue(1)\nq.enqueue(2) //ignored...\n\n// С генератором\nlet x = 0\nwhile(x = q.dequeue()) {\n    console.log(x)\n}\n</pre></code>\n<p>Помимо простой очереди, которую я вам здесь показываю, вы также можете найти:</p>\n<ul>\n<li>Очереди приоритета (элементы отсортированы внутри по значению приоритета);</li>\n<li>Круговые очереди (последний элемент которых указывает на первый);</li>\n<li>Двойная очередь (позволяет добавлять и удалять элементы как вначале, так и в конце.</li>\n</ul>\n<h2 id=\"стэк\" style=\"position:relative;\"><a href=\"#%D1%81%D1%82%D1%8D%D0%BA\" aria-label=\"стэк permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Стэк</h2>\n<p>Я пиши о стэке после очереди, потому что они похожи, настолько, что иногда их путают друг с другом. </p>\n<p>Вы можете думать об этой структуре данных как о стопке книг, если вы начнете класть одну поверх другой, а когда вы захотите получить одну, вам придется удалить все книги с нее. Этот способ обработки данных известен как FILO или First In Last Out.</p>\n<p>Стеки полезны для изменение порядка в списке, так как вы можете перемещаться по списку от первого до последнего и сохранять каждый элемент в стек, затем вы начнете их извлекать (вынимая их по шаблону FILO) и последний из них будет первым элементом исходного списка.</p>\n<p>Еще один интересный вариант использования, который мы видели бесчисленное количество раз: возможность отменить действие. Если вы хотите что-то отменить, вы либо пытаетесь отменить последнее действие, либо пытаетесь отменить несколько действий.</p>\n<pre>\n<code>\nclass Operation {\n\n    constructor(val) {\n        this.value = val\n    }\n}\n\nclass Add extends Operation {\n\n    apply(value) {\n        return value + this.value\n    }\n    \n    undo(value) {\n        return value - this.value \n    }\n}\n\nclass Times extends Operation {\n    apply(value) {\n        return value * this.value\n    }\n    undo(value) {\n        return value / this.value\n    }\n}\n\nclass Stack {\n\n    constructor() {\n        this.value = 0\n        this.operations = new Stack()\n    }\n    \n    add(op) {\n        this.value = op.apply(this.value)\n        this.operations.add(op) \n    }\n    \n    undo() {\n        if(this.operations.isEmpty()) {\n            return false\n        }\n        this.value = (this.operations.pop()).undo(this.value)\n    }\n}\n</code>\n</pre>\n<p>Вы можете увидеть, как мы используем собственный стек. Операции представлены в виде классов, каждый из которых имеет два метода: </p>\n<ul>\n<li>apply (делает операцию эффективной)</li>\n<li>undo (представляет собой противоположную операцию)</li>\n</ul>\n<p>В нашем настраиваемом стеке также есть метод отмены, который использует структуру стека, в которой хранятся все операции, и может отменять их эффекты одну за другой.</p>\n<p>И, как вы догадались, реализация стека почти идентична классу очереди из предыдущего:</p>\n<pre>\n<code>\nclass Stack {\n    data = []\n    maxSize\n\n    constructor(initialData, maxSize = -1) {\n        this.data = Array.isArray(initialData) ? initialData : (typeof initialData == \"undefined\" ? [] : [initialData])\n        this.maxSize = maxSize\n    }\n    \n    isFull() {\n        return this.maxSize != -1 ? (this.data.length == this.maxSize) : false\n    }\n    \n    isEmpty() {\n        return this.data.length == 0\n    }\n    \n    add(item) {\n        if(this.isFull()) {\n            return false\n        }\n        this.data.push(item)\n    }\n    \n    *generator() {\n        while(!this.isEmpty()) {\n            yield this.data.pop()\n        }\n    }\n    \n    pop() {\n       const { value, done } = this.generator().next() \n       if(done) return false\n       return value\n    }\n}\n</pre>\n</code>\n<p>Вы можете заметить единственную разницу? Проверьте 27 строку. К счастью для нас, класс Array из JavaScript также предоставляет нам метод pop, который делает то же самое: он удаляет последний добавленный элемент в массив и возвращает его.</p>\n<p>Стеки и очереди - это круто, но давайте посмотрим на что-то более сложное, но при этом более мощное и универсальное.</p>\n<h2 id=\"деревья\" style=\"position:relative;\"><a href=\"#%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D1%8C%D1%8F\" aria-label=\"деревья permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Деревья</h2>\n<p>За деревьями стоит много теории... Я не буду вдаваться в подробности, потому что теория есть в интернете, просто загляните в Википедию или одну из многих книг, посвященных дереьям. Вместо этого я дам вам короткую версию.</p>\n<p>Дерево - это рекурсивно определенная структура, образованная родительским узлом и несколькими дочерними узлами, связанными с одним родительским. Как я уже сказал, это рекурсивное определение в том смысле, что каждый из этих дочерних узлов может одновременно быть родительскими узлами для других дочерних узлов.</p>\n<p>![Tree]/common-portofolio/images/2020-11-30-stuctures-3.png)</p>\n<p>На приведенной выше диаграмме показано, как растет дерево, есть несколько интересных фактов:</p>\n<ul>\n<li>Родственные узлы (то есть узлы с одним и тем же родителем) не соединяются друг с другом.</li>\n<li>Дерево обычно изображается растущим вниз (в отличие от обычного дерева, растущего вверх).</li>\n<li>Узлы не могут быть связаны сами с собой (я знаю, это звучит странно, но подождите, пока мы не дошли до графов...).</li>\n</ul>\n<p>Основные определения используемые в деревьях:</p>\n<ul>\n<li>Корневой узел(родительский узел): узел с дочерними узлами под ним.</li>\n<li>Концевой узел: узел без связанных с ним дочерних узлов.</li>\n<li>Ребро: связь между двумя узлами.</li>\n</ul>\n<p><img src=\"/common-portofolio/images/2020-11-30-stuctures-4.png\"></p>\n<p>А из диаграммы ниже мы также можем определить еще несколько вещей:</p>\n<ul>\n<li>Путь - это список узлов, необходимых для перехода от корневого узла к указанному.</li>\n<li>Глубина дерева - количество узлов, образующих наибольший путь между корневым узлом и самым дальним листовым узлом.</li>\n</ul>\n<p>При этом существует несколько различных типов деревьев в зависимости от логики, связанной с вставкой и извлечением данных из структуры:</p>\n<ul>\n<li>Двоичные деревья - это деревья, в которых родительские узлы могут иметь до двух дочерних элементов. </li>\n<li>Деревья двоичного поиска - особый вид двоичных деревьев. При вставке элемента в дерево сравнивает его со значением родительского узла, и если оно меньше, оно проверяет левый дочерний элемент, в противном случае он проверяет правый. Эта логика повторяется до тех пор, пока вы не найдете листовой узел. Классический вариант использования для них - сохранить упорядоченную структуру элементов с минимальными усилиями.</li>\n<li>Поиск в глубину (DFS) - это способ прохода дерева в поисках чего-либо. Это работает следующим образом: сначала вы проходите всю левую сторону и постепенно проверяете правую сторону.</li>\n</ul>\n<p><img src=\"/common-portofolio/images/2020-11-30-stuctures-5.png\"></p>\n<p>Посмотрите на диаграмму выше, если вы напечатаете значение каждого узла, когда дойдете до него, вы получите: A-> B-> C-> D-> E. Порядок узлов определяется методом DFS.     </p>\n<p>Хочу отметить, что направление обхода можно менять (идти справа налево). Этот алгоритм может использоваться и с графами.</p>\n<p>Я знаю, это звучит так, будто это очень похоже, но позвольте мне показать вам пример того, как вы реализуете двоичное дерево поиска (один из моих любимых видов деревьев), чтобы увидеть, насколько они не такие сложные и на самом деле очень полезны.</p>\n<p>Ниже приведена реализация бинарного дерева</p>\n<pre><code>\nclass BinaryTreeNode {\n\n    constructor(value) {\n        this.value = value\n        this.left_child = null\n        this.right_child = null\n    }\n    \n    compare(v) {\n        if(this.value > v) return -1\n        if(this.value == v) return 0\n        if(this.value < v) return 1\n    }\n}\n\nmodule.exports = class BST {\n\n    constructor() {\n        this.root_node = null\n    }\n    \n    add(elem) {\n        if(!this.root_node) {\n            this.root_node = new BinaryTreeNode(elem)\n            return\n        }\n        \n        let inserted = false\n        let currentNode = this.root_node\n        do {\n            let comp = currentNode.compare(elem)\n            if(comp == -1) {\n                if(!currentNode.left_child) {\n                    currentNode.left_child = new BinaryTreeNode(elem)\n                    inserted = true\n                } else {\n                    currentNode = currentNode.left_child\n                }\n            }\n            \n            if(comp != -1) {\n                if(!currentNode.right_child) {\n                    currentNode.right_child = new BinaryTreeNode(elem)\n                    inserted = true\n                } else {\n                    currentNode = currentNode.right_child\n                }\n            }\n        } while (!inserted)\n    }\n    \n    inorder(parent) {\n        if(parent) {\n            this.inorder(parent.left_child)\n            console.log(parent.value)\n            this.inorder(parent.right_child)\n        }\n    }\n    \n    print() {\n        this.inorder(this.root_node)\n    }\n}\n</code></pre>\n<h2 id=\"графы\" style=\"position:relative;\"><a href=\"#%D0%B3%D1%80%D0%B0%D1%84%D1%8B\" aria-label=\"графы permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Графы</h2>\n<p>Узлы в графе в отличие от деревьев неограничены (узел может быть соеденен с любым другим и в том числе с самим собой).</p>\n<p><img src=\"/common-portofolio/images/2020-11-30-stuctures-6.png\"></p>\n<p>Графы универсальны! Их можно использовать для представления практически любого сценария, в котором объекты связаны друг с другом. Сценарии использования варьируются от макетов сети до архитектур на основе микросервисов, реальных карт...</p>\n<p>Графы настолько практичная структура данных, что существуют даже движки СУБД основанные на концепции графов. </p>\n<p>Ниже приведена реализация графов на скорую руку в JavaScript, включая метод обхода с поиском в глубину.</p>\n<pre><code>\nclass Node {\n\n    constructor(value) {\n        this.value = value\n        this.links = []\n    }\n    \n    linkTo(node, weight) {\n        this.links.push(new Link(this, weight, node))\n    }\n}\n\nclass Link {\n\n    constructor(a, weight, b) {\n        this.left = a;\n        this.weight = weight\n        this.right = b\n    }\n}\n\nclass Graph {\n\n    constructor(root_node) {\n        this.root_node = root_node\n        this.dfs_visited = new Set();\n    }\n    \n    dfs(starting_node) {\n        if(!starting_node) starting_node = this.root_node\n        let node = starting_node \n        console.log(node.value);\n        this.dfs_visited.add(node);\n        node.links.forEach( neighbour => {\n            if (!this.dfs_visited.has(neighbour.right)) {\n                this.dfs(neighbour.right);\n            }\n        })\n    }\n\n}\n</code></pre>\n<p>Из примера выше мы видим, что каждый узел (Node) имеет свой набор ссылок на другие узлы. При этом мы получаем взвешенный граф, то есть помимо ссылки на узел мы еще задаем вес (вес, к примеру, может указывать на задержку между узлами в ЛВС). Метод dfs позабоится об обходе графа, убедившись в том, что мы посетили каждый узел графа только один раз.</p>\n<p>Пример использования:</p>\n<pre><code>\n// Объявление узлов\nlet A = new Node(\"A\")\nlet B = new Node(\"B\")\nlet C = new Node(\"C\")\nlet D = new Node(\"D\")\nlet E = new Node(\"E\")\nlet F = new Node(\"F\")\nlet G = new Node(\"G\")\n\n// Объявление связей узлов\nA.linkTo(B, 1)\nA.linkTo(C, 2)\nB.linkTo(D, 1)\nC.linkTo(E, 10)\nD.linkTo(E, 10)\nD.linkTo(F, 1)\nD.linkTo(G, 1)\nG.linkTo(G, 1)\n\nlet g = new Graph(A)\n// Обход графа\ng.dfs()\n\n</pre></code>\n<p>Результат будет следующмим:</p>\n<pre><code>\nA\nB\nD\nE\nF\nG\nC\n</pre></code>\n<p>Другими словами, каждый узел посещался только один раз. С помощью грфаов вы можете делать более интересные вещи, например, реализовать алгоритм Дейкстры, чтобы найти кратчайший путь между двумя узлами, или реализовать нейронную сеть.</p>\n<h2 id=\"hash-map\" style=\"position:relative;\"><a href=\"#hash-map\" aria-label=\"hash map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hash Map</h2>\n<p>Последняя структура данных, о которой я расскажу в этой статье - это Hash Map. Она позволяет вам хранить пары ключ-значение и довольно быстро извлекать их (она имеет порядок сложности O(1) в лучшем случае, что круто!).</p>\n<p>Давайте представим, у вас есть 300 пар ключ-значение, которые вам нужно сохранить в памяти, вы можете легко прибегнуть к массиву для этого. Если вам нужно получить конкретный элемент, вам нужно будет обойти весь массив в поисках его (это будет наихудшим случаем, учитывая, что элемент, который вы ищете, является последним). В случае с 300 элементами - это не проблема, но если бы это был вариант использования, когда вам нужно будет искать один элемент в списке из 1 000 000 элементов? Это займет некоторое время, и если базовое число продолжает расти, массивы в этом случае становятся все менее и менее полезными.</p>\n<p>Попробуем теперь рассмотреть в качестве альтернативы Hash Map. Hash Map позволяют вам создать структуру, которую вы можете использовать, где ключ может использоваться для быстрого доступа к значению в постоянное время. В JavaScript реализовать Hash Map значительно проще, учитывая, что у нас есть объектные литералы, которые мы можем использовать для добавления случайных свойств (то есть наших ключей). Вот быстрая реализация Hash Map, которая позволяет использовать числовые ключи.</p>\n<pre><code>\nclass HashMap {\n    \n    constructor() {\n        this.map = {}\n    }\n    \n    hash(k) {\n        return k % 10\n    }\n    \n    add(key, value) {\n        let k = this.hash(key)\n        if(!this.map[k]) {\n            this.map[k] = []\n        }\n        this.map[k].push(value)\n    }\n    \n    get(key) {\n        let k = this.hash(key)\n        return this.map[k]\n    }\n    \n}\n\nlet h = new HashMap()\n\nh.add(10, \"hello\")\nh.add(100001, \"world\")\nh.add(1, \"this is a string\")\n\nconsole.log(h)\n</pre></code>\n<p>Результат выполнения скрипта будет следующий:</p>\n<pre><code>\nHashMap {\n  map: { '0': [ 'hello' ], '1': [ 'world', 'this is a string' ] }\n}\n</pre></code>\n<p>Обратите внимание, как \"world\" и \"this is a string\" связаны с одним и тем же ключом, это так называемый хэш-конфликт. В данном случае hash метод вычисляет ключ используя операцию остаточно деления на 10 для гарантирантированного хранения до 10 ключей. Это реализация полезна, если у вас ограниченный объем памяти. Реализуете метода хеширования во многом определяет эффективность hash map'a.</p>\n<p>При правильной реализации эта структура настолько эффективна, что широко используется при индексация базы данных (обычно вы устанавливаете поля в качестве индексов, когда вам нужна операция быстрого поиска) и даже при реализации кеширования, позволяя использовать быстрый поиск для извлечения кешированного контента. Как вы догадались это структура достаточно эффективна, если вы хотите иметь быстрый и повторяющийся поиск.</p>\n<h2 id=\"вывод\" style=\"position:relative;\"><a href=\"#%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4\" aria-label=\"вывод permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Вывод</h2>\n<p>Понимание структур данных, независимо от того, используете ли вы их в повседневных задачах или нет, очень важно. Оно открывает вам глаза на известные шаблоны и дает на них взглянуть под иным углом.</p>\n<p>Можете поиграться с приведенными выше реализациями. Попробуйте создать свою собственную реализацию.\nКакой из них ваш любимый структура данных? Оставьте комментарий внизу и поделитесь им со товарищами!</p>","excerpt":"Введение Понимание стуктур данных помогает во многих аспектах программирования. Не нужно использовать какую-то определенную реализацию, в…","fields":{"slug":"/2020/11/30/what-data-structures-javascript-developer-should-know"},"frontmatter":{"id":"24214ewqedsadas","title":"Какие структуры данных должен знать JavaScript разработчик?","slug":"/2020/11/30/what-data-structures-javascript-developer-should-know","date":"2020-11-28T03:48:03.125Z","headerImage":"https://i.imgur.com/cbqnKGc.jpeg"}},"previous":null,"next":null}]}},"pageContext":{"id":"be2eef1f-428f-5bee-a343-5a9332a3a332","index":1}},"staticQueryHashes":["1003931674","3920033386"]}