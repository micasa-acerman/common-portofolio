{"version":3,"sources":["webpack:///./src/components/Sidebar/Friend/index.js","webpack:///./src/components/Sidebar/LatestPost/index.js","webpack:///./src/components/Sidebar/Information/index.js","webpack:///./src/components/Sidebar/index.js","webpack:///./src/components/Tag/index.js","webpack:///./src/pages/tags.js","webpack:///./src/components/SEO/index.js"],"names":["config","friends","Friend","className","map","friend","ExternalLink","href","title","key","rel","LatestPost","posts","node","to","frontmatter","url","slug","fields","Information","totalCount","defaultProps","wordings","githubUsername","email","zhihuUsername","iconUrl","about","facebook","name","Icon","icon","target","Sidebar","latestPosts","pathPrefix","src","alt","query","render","data","all","limited","site","Tag","count","TagPage","allMarkdownRemark","mapping","edges","forEach","tags","Array","from","Object","keys","sort","b","a","style","margin","item","siteTitleAlt","isPost","description","image","pageQuery","SEO","content","type","JSON","stringify","alternateName","itemListElement","position","headline","schemaOrgJSONLD","property","siteFBAppID","twitter_username"],"mappings":"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","file":"component---src-pages-tags-js-9d1f443ea8b175068d9f.js","sourcesContent":["import React from 'react';\r\n\r\nimport ExternalLink from '../../ExternalLink';\r\n\r\nimport { config } from '../../../../data';\r\n\r\nimport './index.scss';\r\n\r\nconst { friends = [] } = config;\r\n\r\nconst Friend = () => (\r\n  <div className=\"friend\">\r\n    <p>Рекомендуемые ссылки</p>\r\n    {friends.map(friend => (\r\n      <ExternalLink\r\n        href={friend.href}\r\n        title={friend.title}\r\n        key={friend.title}\r\n        rel=\"noopener\"\r\n      />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Friend;\r\n","import React from 'react';\r\n\r\nimport { Link } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './index.scss';\r\n\r\nconst LatestPost = ({ posts }) => (\r\n  <div className=\"latest-post\">\r\n    <p>Последние статьи</p>\r\n    {posts.map(({ node }) => (\r\n      <Link\r\n        to={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\r\n        key={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\r\n        href={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\r\n      >\r\n        {node.frontmatter.title}\r\n      </Link>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nLatestPost.propTypes = {\r\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default LatestPost;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Friend from '../Friend';\r\nimport LatestPost from '../LatestPost';\r\nimport './index.scss';\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst Information = ({ totalCount, posts }) => (\r\n  <div className=\"d-none d-lg-block information my-2\">\r\n    <hr />\r\n    <p>\r\n      Всего&nbsp;\r\n      {totalCount}\r\n      &nbsp;записей\r\n    </p>\r\n    <hr />\r\n    <LatestPost posts={posts} />\r\n    <hr />\r\n    <Friend />\r\n  </div>\r\n);\r\n\r\nInformation.propTypes = {\r\n  totalCount: PropTypes.number.isRequired,\r\n  posts: PropTypes.array,\r\n};\r\n\r\nInformation.defaultProps = {\r\n  posts: [],\r\n};\r\n\r\nexport default Information;\r\n","import React from 'react';\r\nimport { Link, StaticQuery, graphql } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { config } from '../../../data';\r\n\r\nimport Information from './Information';\r\n\r\nimport './index.scss';\r\n\r\nconst {\r\n  wordings = [],\r\n  githubUsername,\r\n  zhihuUsername,\r\n  email,\r\n  iconUrl,\r\n  about,\r\n  facebook,\r\n  name\r\n} = config;\r\n\r\nconst Icon = ({ href, icon }) => (\r\n  <a\r\n    target=\"_blank\"\r\n    href={href}\r\n    rel=\"external nofollow noopener noreferrer\"\r\n    className=\"custom-icon\"\r\n  >\r\n    <span className=\"fa-layers fa-fw fa-2x\">\r\n      <FontAwesomeIcon icon={icon} />\r\n    </span>\r\n  </a>\r\n);\r\n\r\nconst Sidebar = ({ totalCount, latestPosts,pathPrefix }) => (\r\n  <header className=\"intro-header site-heading text-center col-xl-2 col-lg-3 col-xs-12 order-lg-1\">\r\n    <div className=\"about-me\">\r\n      <Link to={about} href={about} className=\"name\">\r\n        <img className=\"avatar\" src={`${pathPrefix}/${iconUrl}`} alt={name} />\r\n        <h4>{name}</h4>\r\n      </Link>\r\n      <p className=\"mb-1\">{wordings[0]}</p>\r\n      <p className=\"mb-3\">{wordings[1]}</p>\r\n      {/* <Icon\r\n        href={`https://www.zhihu.com/people/${zhihuUsername}`}\r\n        icon={['far','telegram']}\r\n      /> */}\r\n      <Icon\r\n        href={`https://github.com/${githubUsername}`}\r\n        icon={['fab', 'github']}\r\n      />\r\n      <Icon href={`mailto:${email}`} icon={['far', 'envelope']} />\r\n      {facebook\r\n        && <Icon href={`https://www.facebook.com/${facebook}/`} icon={['fab', 'facebook']} />\r\n      }\r\n      <Information totalCount={totalCount} posts={latestPosts} />\r\n    </div>\r\n  </header>\r\n);\r\n\r\nIcon.propTypes = {\r\n  href: PropTypes.string.isRequired,\r\n  icon: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nSidebar.propTypes = {\r\n  totalCount: PropTypes.number,\r\n  latestPosts: PropTypes.array, //eslint-disable-line\r\n};\r\n\r\nSidebar.defaultProps = {\r\n  totalCount: 0,\r\n  latestPosts: [],\r\n};\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      fragment cardData on MarkdownRemark {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          id\r\n          title\r\n          url: slug\r\n          date\r\n          tags\r\n          description\r\n          headerImage\r\n        }\r\n      }\r\n\r\n      query SidebarQuery {\r\n        site(siteMetadata: {}) {\r\n          pathPrefix\r\n        }\r\n        all: allMarkdownRemark {\r\n          totalCount\r\n        }\r\n\r\n        limited: allMarkdownRemark(\r\n          sort: { order: DESC, fields: frontmatter___date }\r\n          limit: 6\r\n        ) {\r\n          latestPosts: edges {\r\n            node {\r\n              ...cardData\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => <Sidebar {...data.all} {...data.limited} pathPrefix={data.site.pathPrefix} />}\r\n  />\r\n);\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Tag = ({ name, count }) => (\n  <a href={`/tag/${name}`} className=\"header-tag\">\n    {name}\n    &nbsp;\n    {count}\n  </a>\n);\n\nTag.propTypes = {\n  name: PropTypes.string.isRequired,\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nTag.defaultProps = {\n  count: '',\n};\n\nexport default Tag;\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport Sidebar from '../components/Sidebar';\r\nimport Tag from '../components/Tag';\r\nimport SEO from '../components/SEO';\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst TagPage = ({ data }) => {\r\n  const { allMarkdownRemark } = data;\r\n\r\n  const mapping = {};\r\n\r\n  allMarkdownRemark.edges.forEach(({ node }) => {\r\n    const { tags } = node.frontmatter;\r\n    tags.forEach((name) => {\r\n      if (mapping[name]) {\r\n        mapping[name] += 1;\r\n      } else {\r\n        mapping[name] = 1;\r\n      }\r\n    });\r\n  });\r\n\r\n  const tags = Array.from(Object.keys(mapping)).sort(\r\n    (b, a) => mapping[a] - mapping[b],\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div\r\n        className=\"row\"\r\n        style={{\r\n          margin: 15,\r\n        }}\r\n      >\r\n        <Sidebar />\r\n\r\n        <div className=\"col order-2\">\r\n          {tags.map(item => (\r\n            <Tag name={item} key={item} count={mapping[item]} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <SEO\r\n        title=\"Метки\"\r\n        url=\"/tags/\"\r\n        siteTitleAlt=\"Micasa's Blog\"\r\n        isPost={false}\r\n        description=\"Страница меток\"\r\n        image=\"https://i.imgur.com/M795H8A.jpg\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TagPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query getAllTags {\r\n    allMarkdownRemark {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            tags\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\nimport Helmet from 'react-helmet';\n\nimport PropTypes from 'prop-types';\n\nimport config from '../../../data';\n\nconst schemaOrgJSONLD = ({\n  url,\n  title,\n  siteTitleAlt,\n  isPost,\n  image,\n  description,\n}) => [\n  {\n    '@context': 'http://schema.org',\n    '@type': 'WebSite',\n    url,\n    name: title,\n    alternateName: siteTitleAlt || '',\n  },\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [\n        {\n          '@type': 'ListItem',\n          position: 1,\n          item: {\n            '@id': url,\n            name: title,\n            image,\n          },\n        },\n      ],\n    }\n    : '',\n  isPost\n    ? {\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      url,\n      name: title,\n      alternateName: siteTitleAlt || '',\n      headline: title,\n      image: {\n        '@type': 'ImageObject',\n        url: image,\n      },\n      description,\n    }\n    : '',\n];\n\nconst SEO = ({\n  url, title, description, image, siteTitleAlt, isPost,\n}) => (\n  <Helmet>\n    <title>{title}</title>\n\n    {/* General tags */}\n    <meta name=\"description\" content={description} />\n    <meta name=\"image\" content={image} />\n\n    {/* Schema.org tags */}\n    <script type=\"application/ld+json\">\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\n    </script>\n\n    {/* OpenGraph tags */}\n    <meta property=\"og:url\" content={url} />\n    {isPost ? (\n      <meta property=\"og:type\" content=\"article\" />\n    ) : (\n      <meta property=\"og:type\" content=\"website\" />\n    )}\n    <meta property=\"og:title\" content={title} />\n    <meta property=\"og:description\" content={description} />\n    <meta property=\"og:image\" content={image} />\n    <meta\n      property=\"fb:app_id\"\n      content={config.siteFBAppID ? config.siteFBAppID : ''}\n    />\n\n    {/* Twitter Card tags */}\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\n    <meta\n      name=\"twitter:creator\"\n      content={config.twitter_username ? config.twitter_username : ''}\n    />\n    <meta name=\"twitter:title\" content={title} />\n    <meta name=\"twitter:description\" content={description} />\n    <meta name=\"twitter:image\" content={image} />\n  </Helmet>\n);\n\nSEO.propTypes = {\n  url: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  siteTitleAlt: PropTypes.string.isRequired,\n  isPost: PropTypes.bool.isRequired,\n};\n\nSEO.defaultProps = {\n  title: config.title,\n};\n\nexport default SEO;\n"],"sourceRoot":""}