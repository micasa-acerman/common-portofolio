@import "../../styles/colors";
@import url(https://fonts.googleapis.com/css?family=Open+Sans:300,400,700); // Variables
$open-sans: "Open Sans", sans-serif; // clear-fix mixin
@mixin cf {
  &::after,
  &::before {
    content: "";
    display: table;
  }

  &::after {
    clear: both;
  }
}
// Base styles
// Here's the meat and potatoes.

/* Our mixin positions a copy of our text
directly on our existing text, while
also setting content to the appropriate
text set in the data-text attribute. */
@mixin glitchCopy { 
  content: attr(data-text);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}



.custom-card {
  transition: box-shadow 0.5s cubic-bezier(0.22, 0.61, 0.36, 1);

  &:hover {
    box-shadow: 0 0 10px 0 rgba(0, 0, 0, 0.3);
      
    .wrapper {
      filter: grayscale(0%);
      .data {
        transform: translateY(-1em);
        transition: transform 0.3s;
      }
    }  
    .date {
      opacity: .8;
    }
    .glitch{
      
      // Creates a copy before our text. 
      &::before{
        // Duplicates our text with the mixin.
        @include glitchCopy;
        // Scoots text slightly to the left for the color offset.
        left: 2px;
        // Creates the color 'shadow' that happens on the glitch.
        text-shadow: -2px 0 #ff00c1;
        /* Creates an initial clip for our glitch. This works in
        a typical top,right,bottom,left fashion and creates a mask
        to only show a certain part of the glitch at a time. */
        clip: rect(44px, 450px, 56px, 0);
        /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
        with an alternating animation to keep things fresh. */
        animation: glitch-anim 5s infinite linear alternate-reverse;
      }
      
      // Creates a copy after our text. Note comments from ::before.
      &::after {
        @include glitchCopy;
        left: -2px;
        text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
        animation: glitch-anim2 1s infinite linear alternate-reverse;
      }
      }
      }
      
      /* Creates an animation with 20 steaps. For each step, it calculates 
      a percentage for the specific step. It then generates a random clip
      box to be used for the random glitch effect. Also adds a very subtle
      skew to change the 'thickness' of the glitch.*/
      @keyframes glitch-anim {
      $steps: 20;
      @for $i from 0 through $steps {
        #{percentage($i*(1/$steps))} {
          clip: rect(random(100)+px, 9999px, random(100)+px, 0);
          transform: skew((random(100) / 100) + deg);
        }
      }
  }

  .wrapper {
    background-position: center;
    @media (min-width: 576px) {
      min-height: 15rem;
    }
    background-size: contain;
    background-repeat: no-repeat;
    min-height: 18rem;
    position: relative;
    overflow: hidden;
    box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    background-color: white;
    transition: all 0.5s ease 0s;
    filter: grayscale(100%);
  }

  .data {
    transform: translateY(0);
    transition: transform 0.3s;

    .content {
      padding: 1em;
      position: relative;
      z-index: 1;

      // Tags, Date
      .stats {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
      }
    }
  }

  .title {
    margin-top: 20px;
  }

  .date {
    transition: opacity .5s ease;
    background-color: $black;
    color: $white;
    padding: 0.8em;
    position: absolute;
    z-index: 999;
    right: 0;
    display: block;
    margin-right: 15px;
    opacity: 0.5;

    span {
      display: block;
      text-align: center;
    }
  }

  .content {
    background-color: $white;

    .title {
      color: $black;
    }

    p {
      color: $black;
    }
  }
}




.glitch {
position: relative;
color: white;
/* Animation provies a slight random skew. Check bottom of doc
for more information on how to random skew. */
// animation: glitch-skew 1s infinite linear alternate-reverse;
}

// Same deal, just duplicated for ultra randomness.
@keyframes glitch-anim2 {
$steps: 20;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    transform: skew((random(100) / 100) + deg);
  }
}
}

// Does the same deal as before, but now only skews. Used for main text.
@keyframes glitch-skew {
$steps: 10;
@for $i from 0 through $steps {
  #{percentage($i*(1/$steps))} {
    transform: skew((random(5) - 5) + deg);
  }
}
}